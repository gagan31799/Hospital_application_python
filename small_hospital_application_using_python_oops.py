# -*- coding: utf-8 -*-
"""small_hospital_application_using_python_oops

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1O78qpJiP9vrOme-I6rHyg9pJD-injaGR

### Problem Statement 


In this project, create a small Hospital Management application using the concept of **Object Oriented Programming**. 

Ask the user to enter a number from 1, 2, 3, 4, or 9. These numbers indicate the following options: 

  - **1: Display List of all Doctors** $\Longrightarrow$ Displays a list of all the doctors in the hospital and their specialty.

  - **2: Display List of all Patients** $\Longrightarrow$ Displays a list of all the patients in the hospital and the disease from which they are suffering.

  - **3: Add a Doctor** $\Longrightarrow$ Adds a new doctor.

  - **4: Add a Patient** $\Longrightarrow$ Adds a new patient. 
    
  - **9: Quit** $\Longrightarrow$ Quits the application.

### List of Activities

**Activity 1:** Create a class `Doctor`.

**Activity 2:** Create a class `Patient`.

**Activity 3:** Create Objects and Call the Functions
"""

#  Create class 'Doctor'. Add constructor, getter functions and class methods

class Doctor:

  doctors_dict={'Dr Nishant Bansal':'Corona','Dr Monika ':'Heart','Dr Harman Singh':'Brain'}


  def __init__(self,emp_id,name,salary,speclization):
    self.__emp_id=emp_id
    self.__name=name
    self.__salary=salary
    self.__speclization=speclization
    Doctor.add_doctor(name,speclization)
  
  def get_emp_id(self):
    return self.__emp_id
  
  def get_name(self):
    return self.__name
  def get_salary(self):
    return self.__salary
  def get_speclization(self):
    return self.__speclization
  
  def set_salary(self,new_salary):
    self.__salary=new_salary
    
  @classmethod 
  def add_doctor(cls,name,speclization):
    cls.doctors_dict[name]=speclization
  @classmethod
  def display_doctors(cls):
    return cls.doctors_dict

#  Create class 'Patient'. Add constructor and functions

#  Create class 'Doctor'. Add constructor, getter functions and class methods

class Patient:

  patient_dict={'Raju':'fever','Rohan':'Dental','Suman':'Corona'}


  def __init__(self,name,age,disease):
    
    self.__name=name
    self.__age=age
    self.__disease=disease
    Patient.add_patient(name,disease)
  
  
  def get_name(self):
    return self.__name
  def get_age(self):
    return self.__age
  def get_disease(self):
    return self.__disease
  
    
  @classmethod  
  def add_patient(cls,name,disease):
    cls.patient_dict[name]=disease
  @classmethod
  def display_patient(cls):
    return cls.patient_dict

# Create infinite while loop

emp_id=100
while True:
  
  print('Enter:\n\t1 to Display all the Doctors and Speclizations.\n\t2 to Dispaly all the patients and their disease\n\t3 to add a Doctor.\n\t4 to add a Patient.\n\t9 to quit the application. ')
  user_choice=int(input())
  while (user_choice  not in [1,2,3,4,9]):
    print('Please enter valid Input')
    user_choice=int(input())
  if(user_choice==1):
    print(Doctor.display_doctors())
  elif(user_choice==2):
    print(Patient.display_patient())
  elif(user_choice==3):
    name=input('Enter Doctor Name: ')
    salary=input('Enter New Doctor Salary: ')
    specilaity=input('Enter Doctor specliaty: ')
    emp_id+=10
    doc=Doctor(emp_id,name,salary,specilaity)
    print("Following Data has added",doc.get_name(),doc.get_salary())
    update_choice=int(input("Do you wish to update the salary\n Enter 1 for YES \n Enter 2 for NO "))
    if update_choice== 1:
      new_salary=float(input("Enter the new salary"))
      doc.set_salary(new_salary)
      print("Salary is successfully updated")
      print("Employee ID:",doc.get_emp_id())
      print("Doctor Name:",doc.get_name())
      print("Doctor Salary:",doc.get_salary())
      print("Speclization:",doc.get_speclization())
  elif (user_choice == 4):
      name = input("Enter the name of the Patient:\n")
      age = int(input("Enter the age of the Patient:\n"))              
      disease = input("Enter the name of the disease for which the patient has to be diagnosed: ")
      patient = Patient(name,age,disease)
      print(Patient.display_patient())          
      print("New Patient Name: ",patient.get_name())
      print("New Patient age: ",patient.get_age())
      print("New Patient Disease: ",patient.get_disease())        
      
  elif(user_choice==9):
      break